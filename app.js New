var createError = require('http-errors');
var express = require('express');
var path = require('path');
var cookieParser = require('cookie-parser');
var logger = require('morgan');

var indexRouter = require('./routes/index');
var usersRouter = require('./routes/users');


// Mongo lines
var MongoClient = require('mongodb').MongoClient
var url = "mongodb://localhost:27017/"

async function getUser()
{
    return await MongoClient.connect(url)
}



// added line
var userInfo = require('./public/data/userInfo.json');



var app = express();

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'jade');

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));



// ------------------------------------------------------------------------
// get the list of people
app.get('/getUserList', async function(req, res)
{
    // mongo 
    const dbClient = await getUser()
    var dbo = dbClient.db('groupProject') 
    var collection = dbo.collection('mongoGroupProject')

    // unknown amount of time as well, so need await
    const allDocuments = await collection.find().toArray()

    // 
    const listFromMongo = []
    for (let i = 0; i < allDocuments.length; i++)
    {
        listFromMongo.push(allDocuments[i])
    }
    
    res.setHeader('Content-Type', 'application/json');
    res.end(JSON.stringify(listFromMongo));
});


// save a whole new person
app.post('/saveUserInfo', async function(req, res)
{
    const firstName= req.body.firstName
    const lastName= req.body.lastName
    const dateOfBirth = req.body.dateOfBirth
    const bio = req.body.bio
    const userId=  req.body.userID
    const pet= req.body.pet


    //mongo 
    const dbClient = await getUser()

    var dbo = dbClient.db('groupProject')
    // change
    dbo.collection('mongoGroupProject').insertOne({firstName: firstName, lastName: lastName, dateOfBirth: dateOfBirth, bio: bio, userId:userId, pet: pet}, function(err, res)
    {
        if(err) throw(err)
        dbClient.close()
    })

    res.setHeader('Content-Type', 'application/json');

    const allDocuments = await dbo.collection('mongoGroupProject').find().toArray()
    console.log(allDocuments)
    const listFromMongo = []
    for (let i = 0; i < allDocuments.length; i++)
    {
        listFromMongo.push(allDocuments[i])
    }
    res.end(JSON.stringify(listFromMongo))
})


//delete a user
app.post('/deleteUser', function(req, res)
{
    // //set the index to -1
    // var indexOfPerson = -1

    // // find the index of which object contains the ID that is being deleted
    // for (var i = 0; i < userInfo.length; i++)
    // {
    //     if(Object.values(userInfo[i]).indexOf(req.body.otherUserId) > -1)
    //     {
    //         indexOfPerson = i;
    //     }
    // }

    // //splice it to get rid of it
    // if(indexOfPerson > -1)
    // {
    //     userInfo.splice(indexOfPerson, 1)
    // }
    
    // res.setHeader('Content-Type', 'application/json');
    // res.end(JSON.stringify(userInfo));


    savedUsers = savedUsers.filter(item => item !== req.body.userID);
    console.log(userInfo)

    res.setHeader('Content-Type', 'application/json')
    res.end(JSON.stringify(userInfo))
})


app.post('/updateUser', async function(req, res) {
    //mongo 
    const dbClient = await getUser()
    var dbo = dbClient.db('groupProject')

    console.log(req.body.oldPet + " " + req.body.newPet + " " + req.body.userId)
    // 
    //const oldNamePlace = await collection.find(req.body.oldPet).toArray()

    dbo.collection('mongoGroupProject').updateOne({userId: req.body.userId}, {$set: {pet: req.body.newPet}}, function(err, res)
    {
        if(err) throw(err)
        dbClient.close()
    })

    res.setHeader('Content-Type', 'application/json');

    const allDocuments = await dbo.collection('mongoGroupProject').find().toArray()
    const listFromMongo = []
    //var lst = {firstName, lastName, dateOfBirth, bio, userId, pet}
    for (let i = 0; i < allDocuments.length; i++)
    {
        listFromMongo.push(allDocuments[i])
    }
    res.end(JSON.stringify(listFromMongo))


    // res.setHeader('Content-Type', 'application/json')
    // res.end(JSON.stringify(userInfo))
})

//update the information
// app.post('/setUserInfo', function(req, res)
// {
//     userInfo[req.body.idx].firstName = req.body.firstName;
//     userInfo[req.body.idx].lastName = req.body.lastName;
//     userInfo[req.body.idx].dateOfBirth = req.body.dateOfBirth;
//     userInfo[req.body.idx].bio = req.body.bio;
//     userInfo[req.body.idx].id = req.body.id;
//     userInfo[req.body.idx].pet = req.body.pet;


//     res.setHeader('Content-Type', 'application/json');
//     res.end(JSON.stringify(userInfo[req.body.idx]));
// });
// -----------------------------------------------------------------------




app.use('/', indexRouter);
app.use('/users', usersRouter);

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

// error handler
app.use(function(err, req, res, next) {
    // set locals, only providing error in development
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};

    // render the error page
    res.status(err.status || 500);
    res.render('error');
});

module.exports = app;
